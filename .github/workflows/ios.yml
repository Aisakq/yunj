name: iOS (Capacitor) Build & Optional TestFlight Upload

on:
  workflow_dispatch:
    inputs:
      server_url:
        description: "Remote web app URL (e.g., https://yourapp.onrender.com)"
        required: true
      next_public_socket_url:
        description: "Socket server URL (e.g., https://yourapp.onrender.com)"
        required: true

jobs:
  build-ios:
    runs-on: macos-14
    defaults:
      run:
        working-directory: ./yunj_archive
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Set env for Capacitor/Next
        run: |
          echo "CAP_SERVER_URL=${{ github.event.inputs.server_url }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SOCKET_URL=${{ github.event.inputs.next_public_socket_url }}" >> $GITHUB_ENV

      - name: Build Next.js (production)
        run: npm run build

      - name: Sync iOS platform
        run: |
          npx cap add ios || true
          npx cap sync ios

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios/App
          pod install --repo-update

      - name: Install xcpretty
        run: |
          gem install xcpretty -N

      - name: Import signing certificates (optional for signed builds)
        if: ${{ secrets.CERT_P12_BASE64 && secrets.CERT_PASSWORD && secrets.PROVISIONING_PROFILE_BASE64 }}
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.CERT_P12_BASE64 }}
          p12-password: ${{ secrets.CERT_PASSWORD }}
          provisioning-profile-base64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

      - name: Build and Archive (App Store)
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          mkdir -p build
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            CODE_SIGN_STYLE=Automatic \
            -allowProvisioningUpdates \
            archive | xcpretty

      - name: Create ExportOptions.plist
        run: |
          cat > build/ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
          </dict>
          </plist>
          PLIST

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportPath build \
            -exportOptionsPlist build/ExportOptions.plist | xcpretty

      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/*.ipa

      - name: Install fastlane (for TestFlight upload)
        if: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID && secrets.APP_STORE_CONNECT_ISSUER_ID && secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          gem install fastlane -N

      - name: Create App Store Connect API key
        if: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID && secrets.APP_STORE_CONNECT_ISSUER_ID && secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > api_key.p8
          cat > api_key.json <<JSON
          {
            "key_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
            "key": "$(cat api_key.p8 | sed 's/\\n/\\n/g')"
          }
          JSON

      - name: Upload to TestFlight (optional)
        if: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID && secrets.APP_STORE_CONNECT_ISSUER_ID && secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD || '' }}
        run: |
          IPA_PATH=$(ls build/*.ipa | head -n 1)
          fastlane pilot upload --ipa "$IPA_PATH" --api_key_path api_key.json --skip_waiting_for_build_processing true
